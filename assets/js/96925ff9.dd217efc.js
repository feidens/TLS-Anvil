"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[938],{1293:function(e,t,n){n.d(t,{Z:function(){return l}});var s=n(7294),i=n(860),a=(n(8846),"tag_sbMh"),o={ipm:{long:"Input Parameter Model",definition:"Contains all relevant test parameters and their values. The IPM is used to generate the test inputs (one value is assigned to each parameter) by using t-way combinatorial testing. Seperate IPMs are defined for each test template, depending on the requirement that the test template checks. Dynamically inserted constraints are applied to the IPM to ensure that for each parameter only values are used that are supported by the SUT."},sut:{long:"System Under Test",definition:"The TLS client or server that you want to test using TLS-Anvil."},"test input(s)?":{long:"Test Input",definition:"A test input is basically a dictionary that contains a single value for each parameter of an IPM. Test inputs are automatically generated from the IPM using t-way combinatorial testing. A test template is executed multiple times using a different test input for each execution."},"test template(s)?":{long:"Test Template",definition:"A test template defines the desired outcome for all test cases derived from it. Thus, it represents a test oracle that is applicable to all derived test cases. Each test template tests a different requirement and is implemented as a normal JUnit test. It basically consists of two building blocks. First it defines which TLS messages are sent and expected to be received by the test suite. Second, it defines when a test case succeeds or fails."},"test case(s)?":{long:"Test Case",definition:"A test case is the (automatically) instantiated version of test template with one specific test input."}},r=Object.keys(o);function l(e){var t=e.id,n=r.map((function(e){return[new RegExp(e,"i").test(t),e]})).filter((function(e){return e[0]}))[0][1],l=o[n];return s.createElement(s.Fragment,null,s.createElement(i.ZP,{content:s.createElement(c,{details:l}),placement:"bottom",arrow:!0,hideOnClick:!0},s.createElement("span",{className:a},t,"\xa0\u24d8")))}function c(e){var t=e.details;return s.createElement(s.Fragment,null,s.createElement("div",null,t.long),s.createElement("hr",{style:{marginTop:"4px",marginBottom:"4px"}}),s.createElement("div",null,t.definition))}},3341:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var s=n(7462),i=n(3366),a=(n(7294),n(3905)),o=n(1293),r=["components"],l={},c="Potential Problems",d={unversionedId:"Potential-Problems",id:"Potential-Problems",title:"Potential Problems",description:"TLS-Anvil does not execute any tests",source:"@site/docs/06-Potential-Problems.md",sourceDirName:".",slug:"/Potential-Problems",permalink:"/docs/Potential-Problems",draft:!1,editUrl:"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/06-Potential-Problems.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Modifying the IPM",permalink:"/docs/Adding-New-Tests/Modifying-the-IPM-Model"}},u={},m=[{value:"TLS-Anvil does not execute any tests",id:"tls-anvil-does-not-execute-any-tests",level:3}],p={toc:m};function f(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"potential-problems"},"Potential Problems"),(0,a.kt)("h3",{id:"tls-anvil-does-not-execute-any-tests"},"TLS-Anvil does not execute any tests"),(0,a.kt)("p",null,"You probably want to test a client or server that violates some of the specifications. In this case the feature discovery of the ",(0,a.kt)(o.Z,{id:"SUT",mdxType:"Definition"})," probably fails. The feature discovery is executed first and is used by TLS-Anvil to determine which TLS specific parameters and algorithms the SUT supports to be able to configure the test suite automatically. If this discovery fails, TLS-Anvil thinks the SUT does not support any parameters and therefore does not execute any ",(0,a.kt)(o.Z,{id:"test templates",mdxType:"Definition"}),". "),(0,a.kt)("p",null,"To fix this problem, the feature discovery must be fixed. For server tests this is handled by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tls-attacker/TLS-Scanner"},"TLS-Scanner"),". For client tests this is performed inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"clientTestPreparation")," function of the ",(0,a.kt)("inlineCode",{parentName:"p"},"de.rub.nds.tlstest.framework.execution.TestRunner")," class."))}f.isMDXComponent=!0}}]);